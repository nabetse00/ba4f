#pragma version 8
intcblock 0 1 2
bytecblock 0x 0x6265745f656e64 0x6d696e5f6265745f616d6f756e74 0x151f7c75 0x6c61746573745f626574746f725f6163636f756e74 0x6f7261636c655f6163636f756e74 0x6265745f6465736372697074696f6e
txn NumAppArgs
intc_0 // 0
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0xce3cfbbc // "start_bet(string,string[],uint64,address)void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x1810c9bc // "place_bet(pay,uint64)(uint64,uint64)"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x597395d5 // "increase_bet(pay)(uint64,uint64)"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x8df6f4a0 // "get_bet()(uint64,uint64)"
==
bnz main_l6
err
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getbet_9
store 10
bytec_3 // 0x151f7c75
load 10
concat
log
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txn GroupIndex
intc_1 // 1
-
store 8
load 8
gtxns TypeEnum
intc_1 // pay
==
assert
load 8
callsub increasebet_8
store 9
bytec_3 // 0x151f7c75
load 9
concat
log
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 6
txn GroupIndex
intc_1 // 1
-
store 5
load 5
gtxns TypeEnum
intc_1 // pay
==
assert
load 5
load 6
callsub placebet_7
store 7
bytec_3 // 0x151f7c75
load 7
concat
log
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
store 1
txna ApplicationArgs 2
store 2
txna ApplicationArgs 3
btoi
store 3
txna ApplicationArgs 4
store 4
load 1
load 2
load 3
load 4
callsub startbet_6
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l13
err
main_l13:
txn ApplicationID
intc_0 // 0
!=
assert
callsub delete_5
intc_1 // 1
return
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_2
intc_1 // 1
return

// prefix_key_gen
prefixkeygen_0:
proto 1 1
pushbytes 0x726573756c74735f64657363 // "results_desc"
frame_dig -1
concat
retsub

// prefix_key_gen
prefixkeygen_1:
proto 1 1
pushbytes 0x726573756c74735f616d6f756e74 // "results_amount"
frame_dig -1
concat
retsub

// create
create_2:
proto 0 0
bytec 5 // "oracle_account"
bytec_0 // ""
app_global_put
bytec 4 // "latest_bettor_account"
bytec_0 // ""
app_global_put
pushbytes 0x726573756c74 // "result"
intc_0 // 0
app_global_put
bytec_1 // "bet_end"
intc_0 // 0
app_global_put
bytec 6 // "bet_description"
bytec_0 // ""
app_global_put
intc_0 // 0
bytec_2 // "min_bet_amount"
app_global_get_ex
store 12
store 11
load 12
!
assert
bytec_2 // "min_bet_amount"
pushint 8900 // 8900
app_global_put
retsub

// auth_only
authonly_3:
proto 1 1
frame_dig -1
intc_0 // 0
app_params_get AppCreator
store 0
==
retsub

// auth_only
authonly_4:
proto 1 1
frame_dig -1
global CreatorAddress
==
retsub

// delete
delete_5:
proto 0 0
txn Sender
callsub authonly_4
// unauthorized
assert
intc_1 // 1
return

// start_bet
startbet_6:
proto 4 0
intc_0 // 0
dup
bytec_0 // ""
intc_0 // 0
dup
txn Sender
callsub authonly_3
// unauthorized
assert
bytec_1 // "bet_end"
app_global_get
intc_0 // 0
==
// bet length not 0
assert
frame_dig -4
extract 2 0
bytec_0 // ""
!=
// description cannot be empty
assert
frame_dig -2
intc_0 // 0
>
// bet lenght must be > 0
assert
frame_dig -3
intc_0 // 0
extract_uint16
frame_bury 0
frame_dig 0
pushint 9 // 9
<
// posssible results length must be less than 8
assert
frame_dig -1
global ZeroAddress
!=
// oracle cannot be 0 address
assert
bytec_1 // "bet_end"
frame_dig -2
global LatestTimestamp
+
app_global_put
bytec 6 // "bet_description"
frame_dig -4
extract 2 0
app_global_put
bytec 5 // "oracle_account"
frame_dig -1
app_global_put
intc_0 // 0
store 13
startbet_6_l1:
load 13
frame_dig -3
intc_0 // 0
extract_uint16
frame_bury 1
frame_dig 1
<
bnz startbet_6_l5
intc_0 // 0
store 13
startbet_6_l3:
load 13
frame_dig -3
intc_0 // 0
extract_uint16
frame_bury 4
frame_dig 4
<
bz startbet_6_l9
load 13
itob
callsub prefixkeygen_1
intc_0 // 0
app_global_put
load 13
intc_1 // 1
+
store 13
b startbet_6_l3
startbet_6_l5:
frame_dig -3
frame_dig -3
intc_2 // 2
load 13
*
intc_2 // 2
+
extract_uint16
intc_2 // 2
+
load 13
intc_1 // 1
+
frame_dig -3
intc_0 // 0
extract_uint16
frame_bury 3
frame_dig 3
==
bnz startbet_6_l8
frame_dig -3
intc_2 // 2
load 13
*
intc_2 // 2
+
intc_2 // 2
+
extract_uint16
intc_2 // 2
+
startbet_6_l7:
substring3
frame_bury 2
load 13
itob
callsub prefixkeygen_0
frame_dig 2
extract 2 0
app_global_put
load 13
intc_1 // 1
+
store 13
b startbet_6_l1
startbet_6_l8:
frame_dig -3
len
b startbet_6_l7
startbet_6_l9:
bytec 4 // "latest_bettor_account"
global ZeroAddress
app_global_put
retsub

// place_bet
placebet_7:
proto 2 1
bytec_0 // ""
intc_0 // 0
dupn 2
bytec_0 // ""
dup
frame_dig -2
gtxns Sender
txn Sender
==
// Txn Sender must be the payment sender
assert
frame_dig -2
gtxns Receiver
global CurrentApplicationAddress
==
// Payment receiver must be this app address
assert
frame_dig -2
gtxns Amount
frame_bury 1
frame_dig -1
intc_0 // 0
>
// result cannot be 0 [non ended bet]
assert
intc_0 // 0
frame_dig -1
callsub prefixkeygen_0
app_global_get_ex
store 15
store 14
load 15
// Result must be possible
assert
frame_dig 1
bytec_2 // "min_bet_amount"
app_global_get
>
// bet amount must cover box creation MBR
assert
global LatestTimestamp
bytec_1 // "bet_end"
app_global_get
<
// bet windows must be open
assert
frame_dig -2
gtxns Sender
box_get
store 17
store 16
load 17
!
// Cannot re bet with place_bet function! use increase_bet
assert
frame_dig -1
itob
frame_dig 1
itob
concat
frame_bury 0
frame_dig -2
gtxns Sender
box_del
pop
frame_dig -2
gtxns Sender
frame_dig 0
box_put
bytec 4 // "latest_bettor_account"
txn Sender
app_global_put
frame_dig -1
itob
callsub prefixkeygen_1
frame_dig -1
itob
callsub prefixkeygen_1
app_global_get
frame_dig 1
+
app_global_put
retsub

// increase_bet
increasebet_8:
proto 1 1
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
dup
frame_dig -1
gtxns Sender
txn Sender
==
assert
frame_dig -1
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -1
gtxns Amount
bytec_2 // "min_bet_amount"
app_global_get
>
assert
global LatestTimestamp
bytec_1 // "bet_end"
app_global_get
<
assert
frame_dig -1
gtxns Sender
box_get
store 19
store 18
load 19
assert
frame_dig -1
gtxns Sender
box_get
store 21
store 20
load 21
assert
load 20
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 0
pushint 8 // 8
extract_uint64
frame_bury 1
frame_dig -1
gtxns Amount
frame_dig 1
+
frame_bury 3
frame_dig 2
itob
frame_dig 3
itob
concat
frame_bury 0
frame_dig -1
gtxns Sender
box_del
pop
frame_dig -1
gtxns Sender
frame_dig 0
box_put
frame_dig 2
itob
callsub prefixkeygen_1
frame_dig 2
itob
callsub prefixkeygen_1
app_global_get
frame_dig -1
gtxns Amount
+
app_global_put
retsub

// get_bet
getbet_9:
proto 0 1
bytec_0 // ""
txn Sender
box_get
store 23
store 22
load 23
assert
load 22
frame_bury 0
retsub